o	Explain linear search and binary search algorithms.

Linear Search: A simple search algorithm that sequentially searches through an array or list for a specified element. The time complexity for Linear Search is O(n), where n is the number of elements in the data set.

Binary Search: A more efficient search algorithm that works by dividing the sorted data set in half for each iteration, comparing the target value with the middle element. If the target value is less than the middle element, the search continues on the lower half; otherwise, it continues on the upper half. The time complexity for Binary Search in the worst and average cases is O(log n), where n is the number of elements in the data set.



o	Compare the time complexity of linear and binary search.

Linear Search:
Best Case: O(1) - The element is the first in the list.
Average Case: O(n) - The element is somewhere in the middle.
Worst Case: O(n) - The element is the last in the list or not present.


Binary Search:
Best Case: O(1) - The element is the middle of the list.
Average Case: O(log n) - The element is somewhere in the list.
Worst Case: O(log n) - The element is not present.



o	Discuss when to use each algorithm based on the data set size and order.

Linear Search: Use when the dataset is small or unsorted. It is simple to implement and does not require the data to be sorted.

Binary Search: Use for large, sorted datasets. It is much faster than linear search for large lists due to its O(log n) time complexity. It requires an additional sorting step if the data is not already sorted, but this cost is usually outweighed by the efficiency of the search in large datasets.
